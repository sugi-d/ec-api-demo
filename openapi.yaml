openapi: "3.0.3"

info:
  title: "EC API demo"
  description: "APIs for C2C EC site demo"
  version: "1.0.0"

servers:
  - url: "http://localhost:3000"
    description: "local env"

tags:
  - name: "users"
    description: "user manipulation"
  - name: "items"
    description: "item management"
  - name: "orders"
    description: "purchasing items"

paths:
  "/v1/users":
    post:
      deprecated: false
      requestBody:
        description: "user information"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: "user@example.com" }
                password: { type: string, example: "qwerty" }
      responses:
        "200":
          description: "the user has successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "422":
          description: "the user has not been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      summary: "new user registration"
      tags: ["users"]

  "/v1/users/sign_in":
    post:
      deprecated: false
      requestBody:
        description: "user credential"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, example: "user@example.com" }
                password: { type: string, example: "qwerty" }
      responses:
        "200":
          description: "the new token has issued"
          headers:
            Authorization:
              description: "issued Bearer token"
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "401":
          description: "the credential is invalid"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      summary: "issue new API access token"
      tags: ["users"]

  "/v1/items":
    post:
      deprecated: false
      requestBody:
        description: "item information"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, example: "item 1" }
                descriptios: { type: string, example: "item 1 description" }
                price: { type: integer, example: 4980 }
      responses:
        "201":
          description: "the item has successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "401":
          description: "unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrors"
        "422":
          description: "the item has not been created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      summary: "new item registration"
      tags: ["items"]
      security:
        - Bearer: []

  "/v1/items/{id}":
    get:
      deprecated: false
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: item ID
      responses:
        "200":
          description: "the requested item"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "404":
          description: "not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      tags: ["items"]
    patch:
      deprecated: false
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: item ID
      requestBody:
        description: "item information"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, example: "item 1" }
                descriptios: { type: string, example: "item 1 description" }
                price: { type: integer, example: 4980 }
      responses:
        "200":
          description: "the item has successfully updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        "401":
          description: "unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrors"
        "422":
          description: "the item has not been updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
      summary: "update of a existing item"
      tags: ["items"]
      security:
        - Bearer: []
    delete:
      deprecated: false
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID to delete
      responses:
        "204":
          description: "the item has successfully deleted"
        "401":
          description: "unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrors"
      summary: "update of a existing item"
      tags: ["items"]
      security:
        - Bearer: []
  "/v1/orders":
    post:
      deprecated: false
      requestBody:
        description: "target item"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id: { type: integer, example: 123 }
      responses:
        "201":
          description: "the item has successfully purchased"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: "not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "422":
          description: "the item couldnt be purchased"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      summary: "purchase the item"
      tags: ["orders"]
      security:
        - Bearer: []
  "/v1/orders/{id}":
    get:
      deprecated: false
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: order ID
      responses:
        "200":
          description: "the requested order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: "unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthorizationErrors"
        "404":
          description: "not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
      tags: ["orders"]
components:
  schemas:
    Status:
      type: object
      properties:
        status: { type: string, example: "error" }
      required:
        - status
      additionalProperties: false
    Errors:
      type: object
      properties:
        errors: { type: object, example: { "name": ["can't be blank"] } }
      required:
        - errors
      additionalProperties: false
    AuthorizationErrors:
      type: object
      properties:
        errors:
          {
            type: array,
            items: { type: string },
            example: ["You need to sign in"],
          }
      required:
        - errors
      additionalProperties: false
    Item:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: "item 1" }
        description: { type: string, example: "item 1 description" }
        price: { type: integer, example: 4980 }
        user: { $ref: "#/components/schemas/User" }
      required:
        - id
        - name
        - description
        - price
        - user
      additionalProperties: false
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        email: { type: string, example: "user@example.com" }
      required:
        - id
        - email
      additionalProperties: false
    Order:
      type: object
      properties:
        id: { type: integer, example: 123 }
        buyer: { $ref: "#/components/schemas/User" }
        item: { $ref: "#/components/schemas/Item" }
      required:
        - id
        - buyer
        - item
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
